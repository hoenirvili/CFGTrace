//#include <VersionHelpers.h>
//#include <windows.h>
//
// DWORD get_version(void)
//{
//    if (!IsWindows8OrGreater())
//        return 0x2312;
//
//    return 0x0;
//}
//
// int main()
//{
//    DWORD limit = GdiGetBatchLimit();
//    bool limit_above = false;
//    if (limit > 0xfda1)
//        limit_above = true;
//
//    DWORD version = 0x0;
//    if (limit_above)
//        DWORD version = get_version();
//
//    WORD decompile = 0x10;
//    if (version > 6)
//        if (!limit_above)
//            decompile--;
//
//    WORD loop = 0x0;
//    for (WORD i = 0; decompile > 0; --decompile) {
//        version = 0;
//        if (decompile % 2 == 0)
//            version = get_version();
//
//        if (version == 0)
//            loop = 1;
//    }
//
//    const int c = 10;
//    int i = 0;
//    int aux;
//
//    do {
//        aux = i % c;
//        i++;
//        if (i == 10)
//            break;
//    } while (aux < 10);
//
//    return aux - loop;
//}

#include <Windows.h>
#include <stdio.h>

#pragma warning(disable : 4996)

BYTE secret_code[0x39] = {
  0xAA, 0x21, 0xCD, 0x4E, 0xA2, 0xAA, 0x6D, 0x28, 0xD0, 0xD0, 0xD0, 0xD0,
  0xD0, 0x17, 0x52, 0xAE, 0xAF, 0xAF, 0xAF, 0xAF, 0x44, 0x4D, 0xC6, 0x83,
  0x7F, 0xFC, 0x3C, 0x3D, 0xB4, 0xF1, 0x0D, 0x86, 0xCB, 0x37, 0x0C, 0x41,
  0x49, 0x36, 0x3D, 0xB6, 0xE3, 0x1B, 0x18, 0x4D, 0xB1, 0x38, 0x6D, 0x95,
  0x7E, 0x9A, 0x11, 0x54, 0xAC, 0x27, 0xC2, 0x9F, 0x5C};

BYTE shellcode[] = {
  0x8B, 0x44, 0x24, 0x64, 0xBB, 0x4D, 0x5A, 0x90, 0x00, 0x25, 0x00, 0x00, 0xFF,
  0xFF, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x81, 0xE5, 0x00, 0x00, 0xFF, 0xFF,
  0x8B, 0x54, 0x24, 0x04, 0x89, 0x95, 0xAC, 0x02, 0x00, 0x00, 0x8B, 0x10, 0x39,
  0xDA, 0x74, 0x07, 0x2D, 0x00, 0x00, 0x01, 0x00, 0xEB, 0xF3, 0xFC, 0x89, 0x85,
  0x6C, 0x02, 0x00, 0x00, 0x50, 0x50, 0x89, 0xC6, 0x83, 0xC6, 0x3C, 0xAD, 0x89,
  0x85, 0x70, 0x02, 0x00, 0x00, 0x5E, 0x83, 0xC6, 0x16, 0x01, 0xC6, 0xAD, 0xC1,
  0xE8, 0x0D, 0x83, 0xE0, 0x01, 0x5E, 0x83, 0xF8, 0x01, 0x0F, 0x85, 0x01, 0x01,
  0x00, 0x00, 0x89, 0xF2, 0x83, 0xC6, 0x3C, 0xAD, 0x01, 0xC2, 0x83, 0xC2, 0x18,
  0x83, 0xC2, 0x60, 0x89, 0xD6, 0xAD, 0x89, 0x85, 0x74, 0x02, 0x00, 0x00, 0xAD,
  0x89, 0x85, 0x78, 0x02, 0x00, 0x00, 0x8B, 0x85, 0x6C, 0x02, 0x00, 0x00, 0x03,
  0x85, 0x74, 0x02, 0x00, 0x00, 0x83, 0xC0, 0x14, 0x96, 0xAD, 0x91, 0x89, 0x8D,
  0x7C, 0x02, 0x00, 0x00, 0xAD, 0xAD, 0x89, 0x85, 0x80, 0x02, 0x00, 0x00, 0xAD,
  0x89, 0x85, 0x84, 0x02, 0x00, 0x00, 0x8B, 0x8D, 0x7C, 0x02, 0x00, 0x00, 0xBE,
  0x88, 0x02, 0x00, 0x00, 0x01, 0xEE, 0x8B, 0x9D, 0x6C, 0x02, 0x00, 0x00, 0x8B,
  0x85, 0x84, 0x02, 0x00, 0x00, 0x81, 0xBD, 0xAC, 0x02, 0x00, 0x00, 0x05, 0x01,
  0x28, 0x0A, 0x74, 0x13, 0x81, 0xBD, 0xAC, 0x02, 0x00, 0x00, 0x06, 0x01, 0xB0,
  0x1D, 0x74, 0x07, 0xE8, 0x95, 0x00, 0x00, 0x00, 0xEB, 0x05, 0xE8, 0xF1, 0x00,
  0x00, 0x00, 0x89, 0x85, 0xA4, 0x02, 0x00, 0x00, 0x8B, 0x8D, 0x7C, 0x02, 0x00,
  0x00, 0xBE, 0x95, 0x02, 0x00, 0x00, 0x01, 0xEE, 0x8B, 0x9D, 0x6C, 0x02, 0x00,
  0x00, 0x8B, 0x85, 0x84, 0x02, 0x00, 0x00, 0x81, 0xBD, 0xAC, 0x02, 0x00, 0x00,
  0x05, 0x01, 0x28, 0x0A, 0x74, 0x13, 0x81, 0xBD, 0xAC, 0x02, 0x00, 0x00, 0x06,
  0x01, 0xB0, 0x1D, 0x74, 0x0E, 0xE8, 0x83, 0x00, 0x00, 0x00, 0xEB, 0x0C, 0xE8,
  0xAE, 0x00, 0x00, 0x00, 0xEB, 0x05, 0xE8, 0x44, 0x00, 0x00, 0x00, 0x89, 0x85,
  0xA8, 0x02, 0x00, 0x00, 0x8D, 0x9D, 0x59, 0x02, 0x00, 0x00, 0x53, 0xFF, 0x95,
  0xA4, 0x02, 0x00, 0x00, 0x8D, 0x9D, 0x1D, 0x02, 0x00, 0x00, 0x53, 0x50, 0xFF,
  0x95, 0xA8, 0x02, 0x00, 0x00, 0x6A, 0x00, 0x8D, 0x9D, 0x00, 0x02, 0x00, 0x00,
  0x53, 0x8D, 0x9D, 0x09, 0x02, 0x00, 0x00, 0x53, 0x6A, 0x00, 0xFF, 0xD0, 0xC3,
  0x56, 0xFC, 0x31, 0xC9, 0xAC, 0x08, 0xC0, 0x74, 0x03, 0x41, 0xEB, 0xF8, 0x5E,
  0xC3, 0x31, 0xD2, 0x51, 0x56, 0x50, 0x01, 0xD8, 0x8B, 0x38, 0x01, 0xDF, 0xE8,
  0xE2, 0xFF, 0xFF, 0xFF, 0xF3, 0xA6, 0x58, 0x5E, 0x59, 0x74, 0x0B, 0x83, 0xC0,
  0x04, 0x83, 0xC2, 0x04, 0xE2, 0xE3, 0x31, 0xC0, 0xC3, 0x8B, 0xB5, 0x80, 0x02,
  0x00, 0x00, 0x01, 0xD6, 0x01, 0xDE, 0xAD, 0xAD, 0x01, 0xD8, 0xC3, 0x31, 0xD2,
  0x51, 0x56, 0x50, 0x01, 0xD8, 0x8B, 0x38, 0x01, 0xDF, 0xE8, 0xB1, 0xFF, 0xFF,
  0xFF, 0xF3, 0xA6, 0x58, 0x5E, 0x59, 0x74, 0x0B, 0x83, 0xC0, 0x04, 0x83, 0xC2,
  0x04, 0xE2, 0xE3, 0x31, 0xC0, 0xC3, 0x8B, 0xB5, 0x80, 0x02, 0x00, 0x00, 0x01,
  0xD6, 0x01, 0xDE, 0xAD, 0xAD, 0xAD, 0x01, 0xD8, 0xC3, 0x31, 0xD2, 0x51, 0x56,
  0x50, 0x01, 0xD8, 0x8B, 0x38, 0x01, 0xDF, 0xE8, 0x7F, 0xFF, 0xFF, 0xFF, 0xF3,
  0xA6, 0x58, 0x5E, 0x59, 0x74, 0x0B, 0x83, 0xC0, 0x04, 0x83, 0xC2, 0x04, 0xE2,
  0xE3, 0x31, 0xC0, 0xC3, 0x8B, 0xB5, 0x80, 0x02, 0x00, 0x00, 0x01, 0xD6, 0x01,
  0xDE, 0xAD, 0x01, 0xD8, 0xC3, 0x41, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x65, 0x21,
  0x00, 0x45, 0x72, 0x61, 0x20, 0x73, 0x61, 0x20, 0x66, 0x69, 0x69, 0x20, 0x69,
  0x6E, 0x66, 0x65, 0x63, 0x74, 0x61, 0x74, 0x00, 0x4D, 0x65, 0x73, 0x73, 0x61,
  0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72,
  0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x63, 0x3A, 0x5C, 0x4D, 0x79, 0x53, 0x65,
  0x63, 0x72, 0x65, 0x74, 0x44, 0x4C, 0x4C, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x4D,
  0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x75, 0x6E, 0x63, 0x74, 0x69,
  0x6F, 0x6E, 0x00, 0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x6F,
  0x61, 0x64, 0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x00, 0x47, 0x65,
  0x74, 0x50, 0x72, 0x6F, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

typedef int (*my_secret)(int);

int suma(int a, int b)
{
    int sum = a + b;
    return sum;
}

int diff(int a, int b)
{
    int dif = a - b;
    return dif;
}

// void flip_functions(void *f1,void *f2)
//{
//	DWORD oldprotect1,oldprotect2;
//	BYTE swapbuf[0x14];
//	DWORD size = 0;
//	BYTE *perspective = (BYTE*)f1;
//
//	while (perspective[size++] != 0xC3)
//		;
//
//	VirtualProtect(f1, size, PAGE_EXECUTE_READWRITE, &oldprotect1);
//	VirtualProtect(f2, size, PAGE_EXECUTE_READWRITE, &oldprotect2);
//	memcpy(swapbuf, f1, size);
//	memcpy(f1,f2,size);
//	memcpy(f2, swapbuf, size);
//	VirtualProtect(f1, 0x14, oldprotect1, 0);
//	VirtualProtect(f2, 0x14, oldprotect2, 0);
//}

int sumn(int n)
{
    int s = 0;
    int i;

    for (i = 1; i <= n; i++)
        s = s + i;

    return s;
}

void encrypt_code(BYTE *ptr, DWORD size)
{
    DWORD i;

    ptr[0] ^= 0xFF;

    for (i = 1; i < size; i++)
        ptr[i] ^= ptr[i - 1];
}

void decrypt_code(BYTE *ptr, DWORD size)
{
    DWORD i;
    BYTE temp1, temp2;

    temp1 = ptr[0] ^ 0xFF;

    for (i = 1; i < size; i++) {
        temp2 = ptr[i - 1] ^ ptr[i];
        ptr[i - 1] = temp1;
        temp1 = temp2;
    }

    ptr[i - 1] = temp1;
}

int main(int argc, char *argv[])
{
    DWORD i;
    DWORD oldprotect;

    printf("call suma(20,10) = %d\n", suma(20, 10));
    printf("call diff(50,20) = %d\n", diff(50, 20));

    printf("\ndecrypt secret function\n");
    decrypt_code(secret_code, sizeof(secret_code));
    VirtualProtect(secret_code, sizeof(secret_code), PAGE_EXECUTE_READWRITE,
                   &oldprotect);
    printf("\nsecret_function(100) = %d\n",
           ((my_secret)(void *)secret_code)(100));
    VirtualProtect(secret_code, sizeof(secret_code), oldprotect, 0);
    printf("reencrypt the secret_function\n");
    encrypt_code(secret_code, sizeof(secret_code));
    printf("\n");

    printf("This next piece of code only works on WinXP\n");
    DWORD v = GetVersion();
    printf("Version = %08X - %d.%d\n", v, v & 0xFF, (v >> 8) & 0xFF);
    if (v != 0x23F00206) {
        printf("Se pare ca versiunea curenta este WinXP sau Win7 sau Win8 !\n");
        printf("Executing secret functions\n");

        BYTE *secret_func = (BYTE *)VirtualAlloc(
          0, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        memcpy(secret_func, shellcode, sizeof(shellcode));
        ((void (*)(int))secret_func)(v);
        TerminateProcess(GetCurrentProcess(), 0);
    } else
        printf(
          "Din pacate nu ai nici una din versiunile WinXP / Win7 / Win8!\n");

    return 0;
}